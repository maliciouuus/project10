{
	"info": {
		"_postman_id": "d5cad8e1-2f6c-4e99-9a17-b5c2d3e8f3c5",
		"name": "SoftDesk API Test Complet",
		"description": "Collection pour tester l'API SoftDesk, basée sur le script test_api_complete.sh",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:6060",
			"type": "string"
		},
		{
			"key": "timestamp",
			"value": "{{$timestamp}}",
			"type": "string"
		},
		{
			"key": "username",
			"value": "testuser_{{$timestamp}}",
			"type": "string"
		},
		{
			"key": "email",
			"value": "test_{{$timestamp}}@example.com",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "1. Tests d'authentification et autorisations",
			"item": [
				{
					"name": "1.0 Tests d'accès sans authentification",
					"item": [
						{
							"name": "Accès aux projets sans token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Vérifier que l'accès est refusé sans token",
											"pm.test(\"Accès aux projets sans token doit être refusé\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/projects/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"projects",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Accès aux issues sans token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Vérifier que l'accès est refusé sans token",
											"pm.test(\"Accès aux issues sans token doit être refusé\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/projects/1/issues/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"projects",
										"1",
										"issues",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Accès aux commentaires sans token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Vérifier que l'accès est refusé sans token",
											"pm.test(\"Accès aux commentaires sans token doit être refusé\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/projects/1/issues/1/comments/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"projects",
										"1",
										"issues",
										"1",
										"comments",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "1.1 Création d'utilisateur",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Vérifier que l'utilisateur est créé",
									"pm.test(\"Création d'utilisateur réussie\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Extraire et stocker l'ID utilisateur si la réponse est en JSON",
									"try {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData && jsonData.id) {",
									"        pm.environment.set(\"user_id\", jsonData.id.toString());",
									"        console.log(\"User ID sauvegardé: \" + jsonData.id);",
									"    } else {",
									"        console.log(\"ID utilisateur non trouvé dans la réponse\");",
									"    }",
									"} catch (e) {",
									"    console.log(\"Erreur lors de l'extraction de l'ID utilisateur: \" + e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"TestPassword123!\",\n    \"password2\": \"TestPassword123!\",\n    \"first_name\": \"Test\",\n    \"last_name\": \"User\",\n    \"age\": 25,\n    \"can_be_contacted\": true,\n    \"can_data_be_shared\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/signup/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"signup",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "1.2 Création d'utilisateur trop jeune",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Vérifier que la création est refusée car l'utilisateur est trop jeune",
									"pm.test(\"Création d'utilisateur trop jeune doit être refusée\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Vérifier le message d'erreur",
									"try {",
									"    var jsonData = pm.response.json();",
									"    pm.test(\"Vérifier le message d'erreur lié à l'âge\", function() {",
									"        pm.expect(jsonData).to.have.property('age');",
									"    });",
									"} catch (e) {",
									"    console.log(\"Erreur lors de la vérification du message d'erreur: \" + e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"younguser_{{$timestamp}}\",\n    \"email\": \"young_{{$timestamp}}@example.com\",\n    \"password\": \"TestPassword123!\",\n    \"password2\": \"TestPassword123!\",\n    \"age\": 14,\n    \"can_be_contacted\": false,\n    \"can_data_be_shared\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/signup/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"signup",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "1.3 Connexion utilisateur",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Vérifier que la connexion est réussie",
									"pm.test(\"Connexion utilisateur réussie\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Extraire et stocker les tokens",
									"try {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (jsonData && jsonData.access) {",
									"        pm.environment.set(\"token\", jsonData.access);",
									"        console.log(\"Token d'accès sauvegardé\");",
									"    } else {",
									"        console.error(\"Token d'accès non trouvé dans la réponse\");",
									"        pm.test(\"Token d'accès manquant\", function () {",
									"            pm.expect(false).to.be.true; // Échouer le test",
									"        });",
									"    }",
									"    ",
									"    if (jsonData && jsonData.refresh) {",
									"        pm.environment.set(\"refresh_token\", jsonData.refresh);",
									"        console.log(\"Refresh token sauvegardé\");",
									"    } else {",
									"        console.error(\"Refresh token non trouvé dans la réponse\");",
									"        pm.test(\"Refresh token manquant\", function () {",
									"            pm.expect(false).to.be.true; // Échouer le test",
									"        });",
									"    }",
									"} catch (e) {",
									"    console.error(\"Erreur lors de l'extraction des tokens: \" + e);",
									"    pm.test(\"Erreur lors de l'extraction des tokens\", function () {",
									"        pm.expect(false).to.be.true; // Échouer le test",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"TestPassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/token/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "1.4 Rafraîchissement du token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Vérifier que le rafraîchissement du token est réussi",
									"pm.test(\"Rafraîchissement du token réussi\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Extraire et stocker le nouveau token",
									"try {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData && jsonData.access) {",
									"        // Sauvegarder l'ancien token pour référence",
									"        pm.environment.set(\"old_token\", pm.environment.get(\"token\"));",
									"        ",
									"        // Mettre à jour le token d'accès",
									"        pm.environment.set(\"token\", jsonData.access);",
									"        console.log(\"Nouveau token d'accès sauvegardé\");",
									"        ",
									"        // Vérifier que le nouveau token est différent",
									"        pm.test(\"Le nouveau token doit être différent de l'ancien\", function() {",
									"            pm.expect(pm.environment.get(\"token\")).to.not.equal(pm.environment.get(\"old_token\"));",
									"        });",
									"    } else {",
									"        console.error(\"Nouveau token d'accès non trouvé dans la réponse\");",
									"        pm.test(\"Nouveau token d'accès manquant\", function () {",
									"            pm.expect(false).to.be.true; // Échouer le test",
									"        });",
									"    }",
									"} catch (e) {",
									"    console.error(\"Erreur lors de l'extraction du nouveau token: \" + e);",
									"    pm.test(\"Erreur lors de l'extraction du nouveau token\", function () {",
									"        pm.expect(false).to.be.true; // Échouer le test",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/token/refresh/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"token",
								"refresh",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "1.5 Test d'accès avec le nouveau token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Vérifier que l'accès avec le nouveau token est réussi",
									"pm.test(\"Accès avec le nouveau token réussi\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Vérifier que la réponse contient des projets (même vide)",
									"try {",
									"    var jsonData = pm.response.json();",
									"    pm.test(\"La réponse doit être un tableau\", function() {",
									"        pm.expect(Array.isArray(jsonData)).to.be.true;",
									"    });",
									"} catch (e) {",
									"    console.error(\"Erreur lors de la vérification de la réponse: \" + e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Tests des projets",
			"item": [
				{
					"name": "2.1 Création de projet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Vérifier que le projet est créé",
									"pm.test(\"Création de projet réussie\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Extraire et stocker l'ID du projet si la réponse est en JSON",
									"try {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData && jsonData.id) {",
									"        pm.environment.set(\"project_id\", jsonData.id.toString());",
									"        console.log(\"Project ID sauvegardé: \" + jsonData.id);",
									"        ",
									"        pm.test(\"Vérifier les détails du projet\", function() {",
									"            pm.expect(jsonData.title).to.equal(\"Projet Test\");",
									"            pm.expect(jsonData.description).to.equal(\"Description du projet test\");",
									"            pm.expect(jsonData.type).to.equal(\"BACKEND\");",
									"        });",
									"    } else {",
									"        console.error(\"ID projet non trouvé dans la réponse\");",
									"        pm.test(\"ID projet manquant\", function () {",
									"            pm.expect(false).to.be.true; // Échouer le test",
									"        });",
									"    }",
									"} catch (e) {",
									"    console.error(\"Erreur lors de l'extraction de l'ID projet: \" + e);",
									"    pm.test(\"Erreur lors de l'extraction de l'ID projet\", function () {",
									"        pm.expect(false).to.be.true; // Échouer le test",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Projet Test\",\n    \"description\": \"Description du projet test\",\n    \"type\": \"BACKEND\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2 Liste des projets avec authentification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Vérifier que la liste des projets est accessible",
									"pm.test(\"Liste des projets accessible\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Vérifier que la réponse contient un tableau",
									"try {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"La réponse doit être un tableau\", function() {",
									"        pm.expect(Array.isArray(jsonData)).to.be.true;",
									"    });",
									"    ",
									"    pm.test(\"Le tableau ne doit pas être vide\", function() {",
									"        pm.expect(jsonData.length).to.be.above(0);",
									"    });",
									"    ",
									"    if (jsonData.length > 0) {",
									"        // Vérifier que le projet créé précédemment est dans la liste",
									"        var projectId = pm.environment.get(\"project_id\");",
									"        var foundProject = false;",
									"        ",
									"        if (projectId) {",
									"            foundProject = jsonData.some(function(project) {",
									"                return project.id.toString() === projectId;",
									"            });",
									"            ",
									"            pm.test(\"Le projet créé doit être dans la liste\", function() {",
									"                pm.expect(foundProject).to.be.true;",
									"            });",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.error(\"Erreur lors de la vérification de la liste des projets: \" + e);",
									"    pm.test(\"Erreur lors de la vérification de la liste des projets\", function () {",
									"        pm.expect(false).to.be.true; // Échouer le test",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. Tests des issues",
			"item": [
				{
					"name": "3.1 Création d'issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Vérifier que l'issue est créée",
									"pm.test(\"Création d'issue réussie\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Extraire et stocker l'ID de l'issue si la réponse est en JSON",
									"try {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (jsonData && jsonData.id) {",
									"        pm.environment.set(\"issue_id\", jsonData.id.toString());",
									"        console.log(\"Issue ID sauvegardé: \" + jsonData.id);",
									"        ",
									"        pm.test(\"Vérifier les détails de l'issue\", function() {",
									"            pm.expect(jsonData.title).to.equal(\"Bug Test\");",
									"            pm.expect(jsonData.description).to.equal(\"Description du bug\");",
									"            pm.expect(jsonData.priority).to.equal(\"HIGH\");",
									"            pm.expect(jsonData.tag).to.equal(\"BUG\");",
									"            pm.expect(jsonData.status).to.equal(\"TODO\");",
									"        });",
									"    } else {",
									"        console.error(\"ID issue non trouvé dans la réponse\");",
									"        pm.test(\"ID issue manquant\", function () {",
									"            pm.expect(false).to.be.true; // Échouer le test",
									"        });",
									"    }",
									"} catch (e) {",
									"    console.error(\"Erreur lors de l'extraction de l'ID issue: \" + e);",
									"    pm.test(\"Erreur lors de l'extraction de l'ID issue\", function () {",
									"        pm.expect(false).to.be.true; // Échouer le test",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Vérifier que le project_id est disponible avant d'exécuter la requête",
									"const projectId = pm.environment.get(\"project_id\");",
									"if (!projectId) {",
									"    console.error(\"⚠️ Aucun ID de projet disponible. Exécuter d'abord la requête de création de projet.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Bug Test\",\n    \"description\": \"Description du bug\",\n    \"priority\": \"HIGH\",\n    \"tag\": \"BUG\",\n    \"status\": \"TODO\",\n    \"assignee\": null\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/issues/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"issues",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "3.2 Modification d'issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Vérifier que l'issue est modifiée",
									"pm.test(\"Modification d'issue réussie\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Vérifier les détails de l'issue modifiée",
									"try {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"Vérifier les détails de l'issue modifiée\", function() {",
									"        pm.expect(jsonData.title).to.equal(\"Bug Test Updated\");",
									"        pm.expect(jsonData.description).to.equal(\"Description mise à jour\");",
									"        pm.expect(jsonData.priority).to.equal(\"MEDIUM\");",
									"        pm.expect(jsonData.tag).to.equal(\"BUG\");",
									"        pm.expect(jsonData.status).to.equal(\"IN_PROGRESS\");",
									"    });",
									"    ",
									"    // Vérifier que l'ID n'a pas changé",
									"    if (jsonData && jsonData.id) {",
									"        var savedIssueId = pm.environment.get(\"issue_id\");",
									"        pm.test(\"L'ID de l'issue ne doit pas changer après modification\", function() {",
									"            pm.expect(jsonData.id.toString()).to.equal(savedIssueId);",
									"        });",
									"    }",
									"} catch (e) {",
									"    console.error(\"Erreur lors de la vérification de l'issue modifiée: \" + e);",
									"    pm.test(\"Erreur lors de la vérification de l'issue modifiée\", function () {",
									"        pm.expect(false).to.be.true; // Échouer le test",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Vérifier que les IDs nécessaires sont disponibles",
									"const projectId = pm.environment.get(\"project_id\");",
									"const issueId = pm.environment.get(\"issue_id\");",
									"",
									"if (!projectId) {",
									"    console.error(\"⚠️ Aucun ID de projet disponible. Exécuter d'abord la requête de création de projet.\");",
									"}",
									"",
									"if (!issueId) {",
									"    console.error(\"⚠️ Aucun ID d'issue disponible. Exécuter d'abord la requête de création d'issue.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Bug Test Updated\",\n    \"description\": \"Description mise à jour\",\n    \"priority\": \"MEDIUM\",\n    \"tag\": \"BUG\",\n    \"status\": \"IN_PROGRESS\",\n    \"assignee\": null\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/issues/{{issue_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"issues",
								"{{issue_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "3.3 Liste des issues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Vérifier que la liste des issues est accessible",
									"pm.test(\"Liste des issues accessible\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Vérifier que la réponse contient un tableau",
									"try {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"La réponse doit être un tableau\", function() {",
									"        pm.expect(Array.isArray(jsonData)).to.be.true;",
									"    });",
									"    ",
									"    pm.test(\"Le tableau ne doit pas être vide\", function() {",
									"        pm.expect(jsonData.length).to.be.above(0);",
									"    });",
									"    ",
									"    if (jsonData.length > 0) {",
									"        // Vérifier que l'issue créée précédemment est dans la liste",
									"        var issueId = pm.environment.get(\"issue_id\");",
									"        var foundIssue = false;",
									"        ",
									"        if (issueId) {",
									"            foundIssue = jsonData.some(function(issue) {",
									"                return issue.id.toString() === issueId;",
									"            });",
									"            ",
									"            pm.test(\"L'issue créée doit être dans la liste\", function() {",
									"                pm.expect(foundIssue).to.be.true;",
									"            });",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.error(\"Erreur lors de la vérification de la liste des issues: \" + e);",
									"    pm.test(\"Erreur lors de la vérification de la liste des issues\", function () {",
									"        pm.expect(false).to.be.true; // Échouer le test",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Vérifier que l'ID du projet est disponible",
									"const projectId = pm.environment.get(\"project_id\");",
									"",
									"if (!projectId) {",
									"    console.error(\"⚠️ Aucun ID de projet disponible. Exécuter d'abord la requête de création de projet.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/issues/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"issues",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "3.4 Détail d'une issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Vérifier que le détail de l'issue est accessible",
									"pm.test(\"Détail de l'issue accessible\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Vérifier les détails de l'issue",
									"try {",
									"    var jsonData = pm.response.json();",
									"    var savedIssueId = pm.environment.get(\"issue_id\");",
									"    ",
									"    pm.test(\"Vérifier l'ID de l'issue\", function() {",
									"        pm.expect(jsonData.id.toString()).to.equal(savedIssueId);",
									"    });",
									"    ",
									"    pm.test(\"Vérifier les détails de l'issue\", function() {",
									"        pm.expect(jsonData.title).to.equal(\"Bug Test Updated\");",
									"        pm.expect(jsonData.description).to.equal(\"Description mise à jour\");",
									"        pm.expect(jsonData.priority).to.equal(\"MEDIUM\");",
									"        pm.expect(jsonData.tag).to.equal(\"BUG\");",
									"        pm.expect(jsonData.status).to.equal(\"IN_PROGRESS\");",
									"    });",
									"} catch (e) {",
									"    console.error(\"Erreur lors de la vérification du détail de l'issue: \" + e);",
									"    pm.test(\"Erreur lors de la vérification du détail de l'issue\", function () {",
									"        pm.expect(false).to.be.true; // Échouer le test",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Vérifier que les IDs nécessaires sont disponibles",
									"const projectId = pm.environment.get(\"project_id\");",
									"const issueId = pm.environment.get(\"issue_id\");",
									"",
									"if (!projectId) {",
									"    console.error(\"⚠️ Aucun ID de projet disponible. Exécuter d'abord la requête de création de projet.\");",
									"}",
									"",
									"if (!issueId) {",
									"    console.error(\"⚠️ Aucun ID d'issue disponible. Exécuter d'abord la requête de création d'issue.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/issues/{{issue_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"issues",
								"{{issue_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Tests des commentaires",
			"item": [
				{
					"name": "4.1 Création de commentaire",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Vérifier que le commentaire est créé",
									"pm.test(\"Création de commentaire réussie\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Extraire et stocker l'ID du commentaire si la réponse est en JSON",
									"try {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (jsonData && jsonData.id) {",
									"        pm.environment.set(\"comment_id\", jsonData.id.toString());",
									"        console.log(\"Comment ID sauvegardé: \" + jsonData.id);",
									"        ",
									"        pm.test(\"Vérifier les détails du commentaire\", function() {",
									"            pm.expect(jsonData.description).to.equal(\"Voici un commentaire de test\");",
									"        });",
									"    } else {",
									"        console.error(\"ID commentaire non trouvé dans la réponse\");",
									"        pm.test(\"ID commentaire manquant\", function () {",
									"            pm.expect(false).to.be.true; // Échouer le test",
									"        });",
									"    }",
									"} catch (e) {",
									"    console.error(\"Erreur lors de l'extraction de l'ID commentaire: \" + e);",
									"    pm.test(\"Erreur lors de l'extraction de l'ID commentaire\", function () {",
									"        pm.expect(false).to.be.true; // Échouer le test",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Vérifier que les IDs nécessaires sont disponibles",
									"const projectId = pm.environment.get(\"project_id\");",
									"const issueId = pm.environment.get(\"issue_id\");",
									"",
									"if (!projectId) {",
									"    console.error(\"⚠️ Aucun ID de projet disponible. Exécuter d'abord la requête de création de projet.\");",
									"}",
									"",
									"if (!issueId) {",
									"    console.error(\"⚠️ Aucun ID d'issue disponible. Exécuter d'abord la requête de création d'issue.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Voici un commentaire de test\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/issues/{{issue_id}}/comments/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"issues",
								"{{issue_id}}",
								"comments",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "4.2 Liste des commentaires",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Vérifier que la liste des commentaires est accessible",
									"pm.test(\"Liste des commentaires accessible\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Vérifier que la réponse contient un tableau",
									"try {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"La réponse doit être un tableau\", function() {",
									"        pm.expect(Array.isArray(jsonData)).to.be.true;",
									"    });",
									"    ",
									"    pm.test(\"Le tableau ne doit pas être vide\", function() {",
									"        pm.expect(jsonData.length).to.be.above(0);",
									"    });",
									"    ",
									"    if (jsonData.length > 0) {",
									"        // Vérifier que le commentaire créé précédemment est dans la liste",
									"        var commentId = pm.environment.get(\"comment_id\");",
									"        var foundComment = false;",
									"        ",
									"        if (commentId) {",
									"            foundComment = jsonData.some(function(comment) {",
									"                return comment.id.toString() === commentId;",
									"            });",
									"            ",
									"            pm.test(\"Le commentaire créé doit être dans la liste\", function() {",
									"                pm.expect(foundComment).to.be.true;",
									"            });",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.error(\"Erreur lors de la vérification de la liste des commentaires: \" + e);",
									"    pm.test(\"Erreur lors de la vérification de la liste des commentaires\", function () {",
									"        pm.expect(false).to.be.true; // Échouer le test",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Vérifier que les IDs nécessaires sont disponibles",
									"const projectId = pm.environment.get(\"project_id\");",
									"const issueId = pm.environment.get(\"issue_id\");",
									"",
									"if (!projectId) {",
									"    console.error(\"⚠️ Aucun ID de projet disponible. Exécuter d'abord la requête de création de projet.\");",
									"}",
									"",
									"if (!issueId) {",
									"    console.error(\"⚠️ Aucun ID d'issue disponible. Exécuter d'abord la requête de création d'issue.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/issues/{{issue_id}}/comments/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"issues",
								"{{issue_id}}",
								"comments",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "4.3 Détail d'un commentaire",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Vérifier que le détail du commentaire est accessible",
									"pm.test(\"Détail du commentaire accessible\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Vérifier les détails du commentaire",
									"try {",
									"    var jsonData = pm.response.json();",
									"    var savedCommentId = pm.environment.get(\"comment_id\");",
									"    ",
									"    pm.test(\"Vérifier l'ID du commentaire\", function() {",
									"        pm.expect(jsonData.id.toString()).to.equal(savedCommentId);",
									"    });",
									"    ",
									"    pm.test(\"Vérifier les détails du commentaire\", function() {",
									"        pm.expect(jsonData.description).to.equal(\"Voici un commentaire de test\");",
									"    });",
									"} catch (e) {",
									"    console.error(\"Erreur lors de la vérification du détail du commentaire: \" + e);",
									"    pm.test(\"Erreur lors de la vérification du détail du commentaire\", function () {",
									"        pm.expect(false).to.be.true; // Échouer le test",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Vérifier que tous les IDs nécessaires sont disponibles",
									"const projectId = pm.environment.get(\"project_id\");",
									"const issueId = pm.environment.get(\"issue_id\");",
									"const commentId = pm.environment.get(\"comment_id\");",
									"",
									"if (!projectId) {",
									"    console.error(\"⚠️ Aucun ID de projet disponible. Exécuter d'abord la requête de création de projet.\");",
									"}",
									"",
									"if (!issueId) {",
									"    console.error(\"⚠️ Aucun ID d'issue disponible. Exécuter d'abord la requête de création d'issue.\");",
									"}",
									"",
									"if (!commentId) {",
									"    console.error(\"⚠️ Aucun ID de commentaire disponible. Exécuter d'abord la requête de création de commentaire.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/issues/{{issue_id}}/comments/{{comment_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"issues",
								"{{issue_id}}",
								"comments",
								"{{comment_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. Tests de suppression",
			"item": [
				{
					"name": "5.1 Suppression de commentaire",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Vérifier que le commentaire est supprimé",
									"pm.test(\"Suppression de commentaire réussie\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Afficher un message de confirmation",
									"console.log(\"Commentaire supprimé avec succès\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Vérifier que tous les IDs nécessaires sont disponibles",
									"const projectId = pm.environment.get(\"project_id\");",
									"const issueId = pm.environment.get(\"issue_id\");",
									"const commentId = pm.environment.get(\"comment_id\");",
									"",
									"if (!projectId) {",
									"    console.error(\"⚠️ Aucun ID de projet disponible. Exécuter d'abord la requête de création de projet.\");",
									"}",
									"",
									"if (!issueId) {",
									"    console.error(\"⚠️ Aucun ID d'issue disponible. Exécuter d'abord la requête de création d'issue.\");",
									"}",
									"",
									"if (!commentId) {",
									"    console.error(\"⚠️ Aucun ID de commentaire disponible. Exécuter d'abord la requête de création de commentaire.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/issues/{{issue_id}}/comments/{{comment_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"issues",
								"{{issue_id}}",
								"comments",
								"{{comment_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "5.2 Suppression d'issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Vérifier que l'issue est supprimée",
									"pm.test(\"Suppression d'issue réussie\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Afficher un message de confirmation",
									"console.log(\"Issue supprimée avec succès\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Vérifier que les IDs nécessaires sont disponibles",
									"const projectId = pm.environment.get(\"project_id\");",
									"const issueId = pm.environment.get(\"issue_id\");",
									"",
									"if (!projectId) {",
									"    console.error(\"⚠️ Aucun ID de projet disponible. Exécuter d'abord la requête de création de projet.\");",
									"}",
									"",
									"if (!issueId) {",
									"    console.error(\"⚠️ Aucun ID d'issue disponible. Exécuter d'abord la requête de création d'issue.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/issues/{{issue_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								"issues",
								"{{issue_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "5.3 Suppression de projet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Vérifier que le projet est supprimé",
									"pm.test(\"Suppression de projet réussie\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Afficher un message de confirmation",
									"console.log(\"Projet supprimé avec succès\");",
									"",
									"// Résumé des tests",
									"console.log(\"=======================================\");",
									"console.log(\"Résumé des tests SoftDesk API\");",
									"console.log(\"=======================================\");",
									"console.log(\"✓ Authentification testée avec succès\");",
									"console.log(\"✓ Rafraîchissement de token testé avec succès\");",
									"console.log(\"✓ Gestion de projets testée avec succès\");",
									"console.log(\"✓ Gestion d'issues testée avec succès\");",
									"console.log(\"✓ Gestion de commentaires testée avec succès\");",
									"console.log(\"✓ Suppression testée avec succès\");",
									"console.log(\"=======================================\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Vérifier que l'ID de projet est disponible",
									"const projectId = pm.environment.get(\"project_id\");",
									"",
									"if (!projectId) {",
									"    console.error(\"⚠️ Aucun ID de projet disponible. Exécuter d'abord la requête de création de projet.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/projects/{{project_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								"{{project_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	]
} 